/* 
    组件的通信

     一：普通的方法---业务组件中使用的较多
        1. 使用props进行父子组件的传值
        2. 使用ref 和 $parent / $children---当需要进行跨级的时候，这些方式不太适用了
        3. 使用vuex和bug等第三方的插件
     二：特殊的方法---高阶组件/组件库中使用的较多（要求耦合性极低，且通信之间应用的场合要很广，可以跨级，无视级数）
        1. 使用Vue.js 内置的 provide / inject 接口
            1. 使用方法：父组件通过provide声明要共享的数据，然后任意想要使用这些数据的后代组件通过inject来获取想要使用的数据
            2. 缺点：子组件中使用这些数据是不能响应的（父组件中这个数据变化了，但是子组件中仍然是初始数据）
            3. 使用场景：子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。
            4. 不适用的场景：父组件向子组件（支持跨级）传递数据   以及   子组件向父组件（支持跨级）传递数据。
        2. 派发与广播
*/