/*
    登录权限功能
        登录权限功能是后台管理系统的一个重要的模块。所有后台系统在设计初期就要考虑权限问题。
        需求：不同的权限展示不同的页面。
        分析：
            1. 首先，我们要考虑的是如何建立权限和页面之间的联系，然后再考虑如何获取不同的权限
            2. 如何建立联系？
                1. 在最初的时候，我们没办法去设定权限，所以可以从页面来推断
                2. 页面---在后台中，我们进入不同的页面，是通过点击菜单进入的---而菜单对应的则是不同的路由---因此，我们如果想要展示不同的页面，就需要设置动态的菜单，即动态的路由---那么不同的权限其实就是在控制不同的路由---所以，权限和页面之间的联系就建成了。即不同的权限，得到动态的路由，展示不同的菜单，进而展示不同的页面。
                3. 所以，现在的问题就是如何获取不同的权限，即不同的菜单，即不同的路由。
            3. 如何获取动态的路由呢？
                获取不同的路由有两个方法：后端去配置，前端去配置
                    1. 后端配置动态路由
                        1. 方法
                            1. 用户登录系统，后端返回用户信息。然后页面进行跳转，我们设置一个全局的路由守卫，判断用户是否登录，如果没有，跳转至登录页面。如果有，那么判断用户是否已经获取动态路由，如果有，直接跳转。如果没有，获取动态路由并存储到vuex中，然后进行路由的挂载，最终进行页面的跳转。跳转后
                        2. 注意事项：
                            1. 为什么把动态路由的获取和动态挂载要放在全局路由守卫中呢？
                                其实也可以放在登录页。登录页获取完毕后进行挂载，挂载结束后进行页面跳转。这里注意的是，addRoutes是一个异步操作，所以可以借助promise实现同步操作。
                                但是，这样做的问题：当页面刷新后，vuex的数据丢失，那么此时菜单就没有办法渲染了。我们就需要重新进入登陆页面。结果就是每次刷新都需要重新登录。
                                而把动态路由的获取和挂载放在这个地方，当用户刷新的时候，会再次进入到路由守卫中，然后去判断用户是否登录，菜单信息是否已经获取。这样，当用户刷新的时候，我们就会去重新获取动态路由信息，而路由的挂载也只能放在这个地方了。
                    2. 前端配置动态路由
                        1. 方法
                            1. 在前端提前将路由分为两个部分。一部分存储公共路由，并挂载到路由中。另外，做一个不同角色对应的路由集合。
                            2. 用户登录时，后端返回用户对应的角色。我们将这个信息保存到vuex中
                            3. 进行页面跳转，设置一个全局的路由守卫。在守卫中我们拿着这个角色去匹配到对应的路由，并挂载。最后进行页面的跳转。
                            4. 跳转到菜单页后，从vuex中拿到路由信息，然后动态渲染出来。
                        2. 注意事项：
                            1. 和后端配置同样的为题，为什么将动态路由的获取和挂载放到全局路由守卫中
                                也是因为页面刷新的问题
                            2. 既然是由前端控制权限了，为什么不直接在路由中使用meta属性，增加角色判断呢？
                                因为如果使用meta属性，那么我们需要在菜单渲染的时候进行权限的验证。同时，我们还要在路由守卫中增加验证。因为如果不进行验证，那么我们直接在地址栏中输入不被允许进入的页面路由，还是可以进入的。---因为此时，所有的路由都是已经被挂载了的。
                                而我们在路由守卫中进行角色验证，并计算动态路由，进而挂载的操作。不需要再进行任何验证了。
                                两种方法其实本质没有区别，个人觉得后面的方法其实是一个提取和封装的效果。代码更简洁，判断也少。
            4. 两种获取动态路由的方法的比较
                1. 后台配置的方法有利于后台管理者对每个角色的权限的配置。而前端配置的方法，对每个角色进行权限配置时不太方便。没配置一次，就需要重新写一次权限集合。而后台配置的方法，我们可以直接增加一个用于角色权限设置的页面。
                2. 后台配置的方法不利于前后端的分离。前端增加页面时，必须要后端进行配置，否则访问不到。
*/