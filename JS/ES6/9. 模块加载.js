/*
    JS中使用到的模块加载方式有两种：commonJS和ES6的模块引入
        1. commonJS的模块引入方案：
            1. CommonJS 规范加载模块是同步的。在遇到require的时候才去加载，加载完了以后才去执行后面的操作---类似与CMD
            2. 形式：
                1. 引入：require(路径)
                2. 导出：module.exports.{}//对象
        2. ES6模块引入方案
            1. ES6模块引入的特点：异步加载。也就是将需要使用的模块先加载完再执行代码。---相当于有回调，把执行代码作为模块加载程序的回调操作。
            2.形式：
                1. 引入：import 
                2. 导出：export ...   或者是export default ...   
        3. commonJS和ES6的分析：
            1.AMD规范则是非同步加载模块，允许指定回调函数。

            2.由于 Node.js 主要用于服务器编程，模块文件一般都已经存在于本地硬盘，所以加载起来比较快，不用考虑非同步加载的方式，所以 CommonJS 规范比较适用。

            3.但是，如果是浏览器环境，要从服务器端加载模块，这时就必须采用非同步模式，因此浏览器端一般采用 AMD 规范。
        3. commonJS和ES6的差异
            1. CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。

            2. CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。
            
    浏览器模块加载有两种方式：AMD和CMD
        1. AMD加载方式侧重于提前加载，即模块是提前加载的，在加载完毕后才去执行代码。
        2. CMD加载方式是同步加载。在遇到模块引入的时候才去加载模块。

    浏览器如何发出模块引入的命令---通过script标签
        1. <script type="module">
                import test from './module.js';
                console.log(test())
            </script>
            script标签设置type属性为module以后，就可以在标签中进行模块加载的操作了。平时我们在标签内是不能进行模块加载操作的。
*/